local Ascii = {}
Ascii.miku = {
  [[„ÄÄ„ÄÄ„ÄÄ „ÄÄ„ÄÄ/Ôºæ>„Äã, -‚Äï‚Äê‚ÄêÔºúÔºæ}]],
  [[„ÄÄ„ÄÄ„ÄÄ „ÄÄ./:::/,‚â†¬¥::::::„ÉΩ.]],
  [[„ÄÄ„ÄÄ„ÄÄ„ÄÄ/::::„ÄÉ::::Ôºè}::‰∏ø„Éè]],
  [[„ÄÄ„ÄÄ„ÄÄ./:::::i{l|Ôºè„ÄÄÔæâÔºè }::}]],
  [[„ÄÄ„ÄÄ /:::::::Áìú„Ç§Ôºû„ÄÄ¬¥Ôºú ,:Ôæâ]],
  [[„ÄÄ ./::::::|ÔæâÔæç.{ÔΩ§„ÄÄ(_Ôæå_„ÉéÔæâ„Ç§Ôºø]],
  [[„ÄÄ |:::::::|Ôºè}ÔΩÄÔΩΩ /          /]],
  [[.„ÄÄ|::::::|(_:::„Å§/   ¬†Ô£ø     /„ÄÄneovim!]],
  [[.Ôø£Ôø£Ôø£Ôø£Ôø£Ôø£Ôø£Ôºº/ÔºøÔºøÔºøÔºøÔºø/Ôø£Ôø£Ôø£Ôø£Ôø£]],
}
Ascii.panda = {
  [[‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£†‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä   ]],
  [[‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚¢Ä‚£Ä‚£Ä‚£§‚£§‚£§‚£∂‚£¶‚£§‚£§‚£Ñ‚£Ä‚£Ä‚†Ä‚¢†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä   ]],
  [[‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†õ‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä   ]],
  [[‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä    ]],
  [[ ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä    ]],
  [[‚†Ä ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚¢ø‚£ø‚†ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£§‚£§‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£§‚£§‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚°ø‚†ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä   ]],
  [[‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚†õ‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚†õ‚£ø‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä    ]],
  [[‚†Ä‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢†‚£∂‚£æ‚£ø‚£ø‚£∑‚£§‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚£Ä‚£§‚£ø‚£∑‚£¥‚£∂‚£¶‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä   ]],
  [[‚†Ä‚†Ä‚†Ä‚†Ä ‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£§‚£§‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†ò‚†ª‚£ø‚£ø‚£ø‚°ø‚†ã‚†Ä‚¢π‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚£ø‚£ø‚£ø‚°è‚¢π‚£ø‚†â‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä   ]],
  [[‚†Ä‚†Ä‚†Ä ‚†Ä‚†Ä‚¢†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£Ñ‚†Ä‚†Ä‚†π‚£ø‚£ø‚†ø‚†ã‚†Ä‚¢§‚£Ä‚¢Ä‚£º‚°Ñ‚†Ä‚£†‚†Ä‚†à‚†ª‚£ø‚£ø‚†ü‚†Ä‚¢∏‚£ø‚£á‚£Ω‚£ø‚†ø‚†ø‚†ø‚£ø‚£Ö‚£Ω‚£ø‚°á‚†Ä‚†Ä   ]],
  [[‚†Ä‚†Ä‚†Ä‚†Ä ‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†Å‚†â‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ü‚†Å‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä  ]],
  [[‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ‚†õ]],
  [[‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†õ‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä  ]],
  [[‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä    ]],
}

Ascii.pc = {
  [[             ,----------------,              ,---------,]],
  [[        ,-----------------------,          ,"        ,"|]],
  [[      ,"                      ,"|        ,"        ,"  |]],
  [[     +-----------------------+  |      ,"        ,"    |]],
  [[     |  .-----------------.  |  |     +---------+      |]],
  [[     |  |     neovim!     |  |  |     | -==----'|      |]],
  [[     |  |       ‚àß‚àß        |  |  |     |         |      |]],
  [[     |  |     (ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)     |  |  |/----|`---=    |      |]],
  [[     |  |      (oo)       |  |  |   ,/|==== ooo |      ;]],
  [[     |  |   ‚åí‚åí‚åí‚åí‚åí‚åí‚åí‚åí‚åí‚åí    |  |  |  // |(((( [33]|    ,"]],
  [[     |  `-----------------'  |," .;'| |((((     |  ,"]],
  [[     +-----------------------+  ;;  | |         |,"]],
  [[        /_)______________(_/  //'   | +---------+]],
  [[   ___________________________/___  `,]],
  [[  /  oooooooooooooooo  .o.  oooo /,   \,"-----------]],
  [[ / ==ooooooooooooooo==.o.  ooo= //   ,`\--{)B     ,"]],
  [[/_==__==========__==_ooo__ooo=_/'   /___________,"]],
  [[`-----------------------------']],
}

Ascii.cat = {
  [[                          _    ]],
  [[         |\      _-``---,) )   ]],
  [[   ZZZzz /,`.-'`'    -.   /    ]],
  [[        |,4-  ) )-,_. ,\ (     ]],
  [[       '---''(_/--'  `-'\_)    ]]
}

-- Notes directory (keeping for reference, but functions moved to utils/notes.lua)
local notes = require('utils.notes')

local function button(sc, txt, keybind)
  local sc_ = sc:gsub("%s", ""):gsub("SPC", "<leader>")
  local opts = {
    position = "center",
    text = txt,
    shortcut = sc,
    cursor = 6,
    width = 19,
    align_shortcut = "right",
    hl_shortcut = "Number",
    hl = "Function",
  }
  if keybind then
    opts.keymap = { "n", sc_, keybind, { noremap = true, silent = true } }
  end
  return {
    type = "button",
    val = txt,
    on_press = function()
      local key = vim.api.nvim_replace_termcodes(sc_, true, false, true)
      vim.api.nvim_feedkeys(key, "normal", false)
    end,
    opts = opts,
  }
end

return {
  'goolord/alpha-nvim',
  event = "VimEnter",
  cond = function()
    return not vim.g.vscode
  end,
  dependencies = { 'nvim-tree/nvim-web-devicons' },
  config = function()
    local present, alpha = pcall(require, "alpha")
    if not present then
      return
    end

    -- Make the note functions globally available
    _G.create_new_note = notes.create_new_note
    _G.create_daily_note = notes.create_daily_note

    local header = {
      type = "text",
      val = Ascii.miku,
      opts = {
        position = "center",
        hl = "Comment",
      },
    }
    local greetHeading = {
      type = "text",
      val = { "‰ªäÊó•„ÇÇ1Êó•„Åå„Çì„Å∞„Çã„Åû„ÅÑÔºÅ", "Ê∂ºÈ¢®ÈùíËëâ" },
      opts = {
        position = "center",
        hl = "String",
      },
    }
    local buttons = {
      type = "group",
      val = {
        button("f", "üëÄ  Search", ":Telescope find_files<CR>"),
        button("n", "üìù  New Note", ":lua _G.create_new_note()<CR>"),
        button("d", "üìÖ  Daily", ":lua _G.create_daily_note()<CR>"),
        -- button("b", " Jump to bookmarks", ":Telescope marks<CR>"),
        button("c", "üîß  Config", ":e $HOME/.config/nvim/init.lua | :cd %:p:h<CR>"),
        button("q", "üò∂‚Äçüå´Ô∏è  Quit", ":qa<CR>"),
      },
      opts = {
        position = "center",
        spacing = 1,
      },
    }
    local section = {
      header = header,
      buttons = buttons,
      message = greetHeading,
      footer = {
        type = "text",
        val = {},
        opts = {
          position = "center",
          hl = "Comment",
        },
      }
    }
    local opts = {
      layout = {
        { type = "padding", val = function() return math.floor(vim.o.lines * 0.25) end },
        section.header,
        { type = "padding", val = 1 },
        section.message,
        { type = "padding", val = 2 },
        section.buttons,
        { type = "padding", val = 1 },
        section.footer,
      },
      opts = {
      },
    }
    alpha.setup(opts)
    local autocmd = vim.api.nvim_create_autocmd -- Create autocommand
    autocmd("User", {
      pattern = "LazyVimStarted",
      callback = function()
        local stats = require("lazy").stats()
        -- local ms = (math.floor(stats.startuptime * 100 + 0.5) / 100)
        local ms = stats.startuptime
        local version = " v" ..
            vim.version().major .. "." .. vim.version().minor .. "." .. vim.version().patch
        local plugins = "‚ö°plugins " .. stats.loaded .. "/" .. stats.count .. " in " .. ms .. "ms"
        local footer = version .. "\t" .. plugins .. "\n"
        section.footer.val = footer
        pcall(vim.cmd.AlphaRedraw)
      end,
    })
    -- Disable the statusline, tabline and cmdline while the alpha dashboard is open
    autocmd('User', {
      pattern = 'AlphaReady',
      desc = 'disable status, tabline and cmdline for alpha',
      callback = function()
        vim.go.laststatus = 0
        vim.opt.showtabline = 0
        vim.opt.cmdheight = 0
      end,
    })
    autocmd('BufUnload', {
      buffer = 0,
      desc = 'enable status, tabline and cmdline after alpha',
      callback = function()
        vim.go.laststatus = 2
        vim.opt.showtabline = 2
        vim.opt.cmdheight = 1
      end,
    })
  end
}
